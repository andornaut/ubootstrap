print_header() { echo -e "\n\033[1m$@\033[0m"; }
print_error() { echo -e " \033[1;31m✖\033[0m  $@" >&2; }
print_warn() { echo -e " \033[1;33m!\033[0m  $@" >&2; }
print_ok() { echo -e " \033[1;32m✔\033[0m  ${@-OK}"; }
print_greeting() {
	local message="##############################################################################
$1
##############################################################################"
	echo -e "\n\033[1;32m${message}\033[0m";
}

quit() {
	# Print quit message and exit.
	local msg="${1-Unexpected error}"

	if [[ -z "${msg}" ]]; then
		msg="Exiting with error."
	else
		msg="${msg}"
	fi
	print_error "${msg}"
	exit 1
}

usage() {
	# Print usage message and exit.
	local usage=$1

	if [[ -z "${usage}" ]]; then
		quit "Invalid \$usage message."
	else
		echo "Usage: ${usage}" >&2
		exit 1
	fi
}

failure() { print_error "Failed to install $1"; }
success() { print_ok "Installed $1"; }
skip() { print_warn "Skipping $1."; }

add_repo() {
	local ppa="$1"
	if sudo add-apt-repository -y "${ppa}" >/dev/null 2>&1 ; then
		print_ok "Added repository ${ppa}"
	else
		print_error "Failed to add repository ${ppa}"
	fi
}

# From https://gist.github.com/davejamesmiller/1965569
ask() {
	local prompt default reply

	while true; do
		if [ "${2:-}" = "Y" ]; then
			prompt="Y/n"
			default=Y
		elif [ "${2:-}" = "N" ]; then
			prompt="y/N"
			default=N
		else
			prompt="y/n"
			default=
		fi

		# Ask the question
		read -p "$1 [${prompt}] " reply

		# Default?
		if [ -z "${reply}" ]; then
			reply="${default}"
		fi

		# Check if the reply is valid
		case "${reply}" in
			Y*|y*) return 0 ;;
			N*|n*) return 1 ;;
		esac
	done
}

assert_directory_exists() {
	local directory="$1"

	if [[ ! -d "${directory}" ]]; then
		quit "${directory} does not exist"
	fi
}

download_wget() {
	local package="$1"
	local url="$2"
	local dst="${base}/${package}"

	remove_if_exists "${dst}"
	wget -q -O "${dst}" "${url}" || (print_error "Failed to download ${package}" ; return 1)
}

download_vcs() {
	local vcs="$1"
	local package="$2"
	local url="$3"
	local branch="$4"
	local dst="${base}/${package}"

	if [[ ! -z "${branch}" ]]; then
		if [[ "${vcs}" == "git" ]]; then
			branch=" -b ${branch} --single-branch"
		elif [[ "${vcs}" == "hg" ]]; then
			branch=" -r ${branch}"
		else
			quit "`Branch` is unsupported for VCS: ${vcs}"
		fi
	fi
	remove_if_exists "${dst}"
	${vcs} clone ${branch} -q "${url}" "${dst}" || (print_error "Failed to download ${package}" ; return 1)
}

fix_install() {
	sudo apt-get -qq -f install -y
}

get_package_from_recipe() {
	echo $(basename $1|cut -f 2 -d "_")
}

install() {
	local packages="$@"

	if sudo apt-get -qq install ${packages} -y --ignore-missing ; then
		success "${packages}"
	else
		failure "${packages}"
	fi
}

install_no_recommends() {
	local packages="$@"

	if sudo apt-get -qq install ${packages} -y --ignore-missing --no-install-recommends ; then
		success "${packages}"
	else
		failure "${packages}"
	fi
}

install_dpkg() {
	local packages="$@"

	if sudo dpkg -i ${packages}; then
		success "${packages}"
	else
		failure "${packages}"
	fi
}

install_dpkg_wget() {
	local package="$1"
	local url="$2"

	if should_install "${package}"; then
		# Repeated in case the first attempt fails and is fixed by fix_install
		download_wget "${package}" "${url}" && \
			(install_dpkg "${base}/${package}"  >/dev/null 2>&1 ; \
				fix_install >/dev/null 2>&1 ; \
				install_dpkg "${base}/${package}" && fix_install)
	fi

}

install_vcs() {
	local vcs="$1"
	local package="$2"
	local url="$3"
	local branch="$4"
	local dst="${base}/${package}"
	should_install "${package}" && download_vcs "${vcs}" "${package}" "${url}" "${branch}" || return 1

	cd "${dst}"
	make -s >/dev/null && sudo make -s install >/dev/null
	ret=$?
	remove_if_exists "${dst}"
	cd "${cwd}"
	if [ $ret -eq 0 ] ; then
		success "${package}"
	else
		failure	"${package}"
	fi
	return $ret
}

remove_if_exists() {
	local dst="$1"

	# Check for a file or a symbolic link
	if [[ -e "${dst}" || -L "${dst}" ]]; then
		sudo rm -rf "${dst}"
	fi
}

should_install() {
	local package="$1"

	if "${is_skip}" && [[ $(type -P "$package") ]] ; then
		skip "${package}"
		return 1
	fi
}

update() {
	sudo apt-get -qq update -y >/dev/null
}
